#!/usr/bin/env python3
"""
Simple Streamlit Web Interface for RAG Control System
‡πÄ‡∏ß‡πá‡∏ö‡∏≠‡∏¥‡∏ô‡πÄ‡∏ó‡∏≠‡∏£‡πå‡πÄ‡∏ü‡∏ã‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏Ç‡πâ‡∏≠‡∏™‡∏≠‡∏ö RAG
"""

import streamlit as st
import json
import tempfile
import os
from pathlib import Path

# Add project root to path for imports
import sys
sys.path.append(str(Path(__file__).parent))

from src.rag_engine import RAGEngine
from src.exam_grader import ExamGrader
from src.vector_store import VectorStoreManager

# Configure Streamlit page
st.set_page_config(
    page_title="RAG Control System",
    page_icon="ü§ñ",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Initialize session state
if 'rag_engine' not in st.session_state:
    st.session_state.rag_engine = None
if 'vector_store' not in st.session_state:
    st.session_state.vector_store = None

@st.cache_resource
def load_rag_system():
    """Load RAG system components"""
    try:
        vector_store = VectorStoreManager()
        rag_engine = RAGEngine(vector_store_manager=vector_store)
        return rag_engine, vector_store
    except Exception as e:
        st.error(f"Error loading RAG system: {e}")
        return None, None

def main():
    """Main web interface"""
    
    # Title and header
    st.title("ü§ñ RAG Control System")
    st.subheader("‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏Ç‡πâ‡∏≠‡∏™‡∏≠‡∏ö‡∏ß‡∏¥‡∏ä‡∏≤‡∏£‡∏∞‡∏ö‡∏ö‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏î‡πâ‡∏ß‡∏¢ AI")
    
    # Sidebar
    with st.sidebar:
        st.header("‚öôÔ∏è Menu")
        mode = st.selectbox(
            "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏´‡∏°‡∏î‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô:",
            ["üó£Ô∏è Q&A Mode", "üìù Exam Grading", "üìä System Status"]
        )
    
    # Load RAG system
    if st.session_state.rag_engine is None:
        with st.spinner("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏∞‡∏ö‡∏ö..."):
            rag_engine, vector_store = load_rag_system()
            st.session_state.rag_engine = rag_engine
            st.session_state.vector_store = vector_store
    
    if st.session_state.rag_engine is None:
        st.error("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á")
        return
    
    # Mode selection
    if mode == "üó£Ô∏è Q&A Mode":
        qa_mode()
    elif mode == "üìù Exam Grading":
        exam_grading_mode()
    elif mode == "üìä System Status":
        system_status_mode()

def qa_mode():
    """Q&A Mode Interface"""
    st.header("üó£Ô∏è Q&A Mode - ‡∏ñ‡∏≤‡∏°-‡∏ï‡∏≠‡∏ö‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°")
    
    # Sample questions
    st.subheader("üîç ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á:")
    sample_questions = [
        "‡∏£‡∏∞‡∏ö‡∏ö‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡πÅ‡∏ö‡∏ö‡∏ß‡∏á‡πÄ‡∏õ‡∏¥‡∏î‡∏Ñ‡∏∑‡∏≠‡∏≠‡∏∞‡πÑ‡∏£",
        "PID Controller ‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏î‡πâ‡∏ß‡∏¢‡∏™‡πà‡∏ß‡∏ô‡πÉ‡∏î‡∏ö‡πâ‡∏≤‡∏á",
        "‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ñ‡πà‡∏≤‡∏¢‡πÇ‡∏≠‡∏ô (Transfer Function) ‡∏Ñ‡∏∑‡∏≠‡∏≠‡∏∞‡πÑ‡∏£",
        "‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ï‡∏Å‡∏ï‡πà‡∏≤‡∏á‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á Steady State ‡πÅ‡∏•‡∏∞ Transient Response",
        "Root Locus ‡∏Ñ‡∏∑‡∏≠‡∏≠‡∏∞‡πÑ‡∏£‡πÅ‡∏•‡∏∞‡πÉ‡∏ä‡πâ‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏ä‡∏ô‡πå‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏£"
    ]
    
    cols = st.columns(2)
    for i, question in enumerate(sample_questions):
        col = cols[i % 2]
        if col.button(f"üìù {question}", key=f"sample_{i}"):
            st.session_state.question_input = question
    
    # Question input
    question = st.text_area(
        "ü§î ‡πÉ‡∏™‡πà‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì:",
        value=getattr(st.session_state, 'question_input', ''),
        height=100,
        key="question_textarea"
    )
    
    col1, col2 = st.columns([1, 4])
    with col1:
        if st.button("üîç ‡∏ñ‡∏≤‡∏°‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°", type="primary"):
            if question.strip():
                with st.spinner("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö..."):
                    try:
                        result = st.session_state.rag_engine.query(
                            question, return_context=True
                        )
                        
                        # Display answer
                        st.subheader("üí° ‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö:")
                        st.write(result['answer'])
                        
                        # Display sources
                        st.subheader(f"üìö ‡πÅ‡∏´‡∏•‡πà‡∏á‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á ({result['num_sources']} ‡πÅ‡∏´‡∏•‡πà‡∏á):")
                        if 'sources' in result:
                            for i, source in enumerate(result['sources'][:3], 1):
                                with st.expander(f"‡πÅ‡∏´‡∏•‡πà‡∏á‡∏ó‡∏µ‡πà {i}"):
                                    st.write(source['content'][:300] + "...")
                    
                    except Exception as e:
                        st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
            else:
                st.warning("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°")

def exam_grading_mode():
    """Exam Grading Mode Interface"""
    st.header("üìù Exam Grading - ‡∏ï‡∏£‡∏ß‡∏à‡∏Ç‡πâ‡∏≠‡∏™‡∏≠‡∏ö")
    
    tab1, tab2 = st.tabs(["üìÑ Single Question", "üìä Full Exam"])
    
    with tab1:
        st.subheader("‡∏ï‡∏£‡∏ß‡∏à‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡πÄ‡∏î‡∏µ‡∏¢‡∏ß")
        
        # Input form
        with st.form("single_question"):
            question = st.text_area("‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°:", height=100)
            student_answer = st.text_area("‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏Ç‡∏≠‡∏á‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤:", height=100)
            correct_answer = st.text_area("‡πÄ‡∏â‡∏•‡∏¢:", height=100)
            
            submitted = st.form_submit_button("üéØ ‡∏ï‡∏£‡∏ß‡∏à‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö", type="primary")
            
            if submitted and all([question, student_answer, correct_answer]):
                with st.spinner("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö..."):
                    try:
                        grader = ExamGrader(st.session_state.rag_engine)
                        result = grader.grade_answer(
                            question=question,
                            student_answer=student_answer,
                            correct_answer=correct_answer
                        )
                        
                        # Display results
                        col1, col2 = st.columns(2)
                        
                        with col1:
                            score = result['score']
                            color = "green" if score >= 70 else "orange" if score >= 50 else "red"
                            st.metric("‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô", f"{score}/100", delta=None)
                            
                        with col2:
                            status = "‚úÖ ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á" if result['is_correct'] else "‚ùå ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á"
                            st.metric("‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞", status)
                        
                        st.subheader("üìù Feedback:")
                        st.write(result['feedback'])
                        
                        if result.get('key_points_covered'):
                            st.subheader("‚úÖ ‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏ï‡∏≠‡∏ö‡∏ñ‡∏π‡∏Å:")
                            for point in result['key_points_covered']:
                                st.write(f"‚Ä¢ {point}")
                        
                        if result.get('missing_points'):
                            st.subheader("‚ùå ‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏î‡∏´‡∏≤‡∏¢‡πÑ‡∏õ:")
                            for point in result['missing_points']:
                                st.write(f"‚Ä¢ {point}")
                    
                    except Exception as e:
                        st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
    
    with tab2:
        st.subheader("‡∏ï‡∏£‡∏ß‡∏à‡∏Ç‡πâ‡∏≠‡∏™‡∏≠‡∏ö‡∏ä‡∏∏‡∏î")
        
        # File upload
        uploaded_file = st.file_uploader(
            "‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡πâ‡∏≠‡∏™‡∏≠‡∏ö (JSON):", 
            type=['json']
        )
        
        if uploaded_file is not None:
            try:
                exam_data = json.loads(uploaded_file.getvalue().decode("utf-8"))
                st.success(f"‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏™‡∏≠‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à - {len(exam_data)} ‡∏Ç‡πâ‡∏≠")
                
                if st.button("üéØ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡∏£‡∏ß‡∏à‡∏Ç‡πâ‡∏≠‡∏™‡∏≠‡∏ö", type="primary"):
                    with st.spinner("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏Ç‡πâ‡∏≠‡∏™‡∏≠‡∏ö..."):
                        try:
                            grader = ExamGrader(st.session_state.rag_engine)
                            results = grader.grade_exam(exam_data)
                            
                            # Display summary
                            col1, col2, col3, col4 = st.columns(4)
                            
                            with col1:
                                st.metric("‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏£‡∏ß‡∏°", f"{results['total_score']}/{results['max_score']}")
                            
                            with col2:
                                st.metric("‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå", f"{results['percentage']:.1f}%")
                            
                            with col3:
                                st.metric("‡∏Ç‡πâ‡∏≠‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å", f"{results['summary']['num_correct']}/{results['num_questions']}")
                            
                            with col4:
                                pass_status = "‚úÖ ‡∏ú‡πà‡∏≤‡∏ô" if results['summary']['pass'] else "‚ùå ‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô"
                                st.metric("‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏™‡∏≠‡∏ö", pass_status)
                            
                            # Detailed results
                            st.subheader("üìä ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ç‡πâ‡∏≠:")
                            for result in results['results']:
                                with st.expander(f"‡∏Ç‡πâ‡∏≠‡∏ó‡∏µ‡πà {result['question_number']} - ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô: {result['score']}/100"):
                                    st.write(f"**‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°:** {result['question']}")
                                    st.write(f"**‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤:** {result['student_answer']}")
                                    st.write(f"**‡πÄ‡∏â‡∏•‡∏¢:** {result['correct_answer']}")
                                    st.write(f"**Feedback:** {result['feedback']}")
                            
                            # Download results
                            results_json = json.dumps(results, ensure_ascii=False, indent=2)
                            st.download_button(
                                label="üì• ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå (JSON)",
                                data=results_json,
                                file_name="exam_results.json",
                                mime="application/json"
                            )
                        
                        except Exception as e:
                            st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏Ç‡πâ‡∏≠‡∏™‡∏≠‡∏ö: {e}")
            
            except Exception as e:
                st.error(f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏î‡πâ: {e}")

def system_status_mode():
    """System Status Mode Interface"""
    st.header("üìä System Status - ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏∞‡∏ö‡∏ö")
    
    try:
        # System information
        status = st.session_state.rag_engine.get_status()
        vector_info = st.session_state.vector_store.get_collection_info()
        
        # Display status
        col1, col2, col3 = st.columns(3)
        
        with col1:
            st.metric("LLM Provider", status['llm_provider'].upper())
        
        with col2:
            st.metric("Vector Store", vector_info.get('name', 'N/A'))
        
        with col3:
            st.metric("Documents", vector_info.get('count', 0))
        
        # Detailed information
        st.subheader("üîß System Details:")
        
        with st.expander("Vector Store Information"):
            st.json({
                "Collection Name": vector_info.get('name', 'N/A'),
                "Document Count": vector_info.get('count', 0),
                "Persist Directory": vector_info.get('persist_directory', 'N/A')
            })
        
        with st.expander("LLM Configuration"):
            st.json({
                "Provider": status['llm_provider'],
                "Embedding Model": status['embedding_model']
            })
        
        # Test system
        st.subheader("üß™ Quick System Test:")
        if st.button("üîç ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö"):
            with st.spinner("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏î‡∏™‡∏≠‡∏ö..."):
                try:
                    test_result = st.session_state.rag_engine.query("‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö")
                    st.success("‚úÖ ‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏õ‡∏Å‡∏ï‡∏¥")
                    st.write("**Test Response:**", test_result['answer'][:100] + "...")
                except Exception as e:
                    st.error(f"‚ùå ‡∏û‡∏ö‡∏õ‡∏±‡∏ç‡∏´‡∏≤: {e}")
    
    except Exception as e:
        st.error(f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏î‡πâ: {e}")

if __name__ == "__main__":
    main()